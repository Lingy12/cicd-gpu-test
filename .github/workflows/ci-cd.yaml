name: CI/CD Pipeline with GPU Support

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.10"
  MODEL_CACHE_DIR: "/cache/models"

jobs:
  test:
    name: Test
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      
    - name: Start server for tests
      run: |
        python main.py &
        SERVER_PID=$!
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        
        # Wait for server to start with timeout
        timeout 300 bash -c 'until curl -s http://localhost:8000/health > /dev/null; do sleep 2; done' || {
          echo "Server failed to start within 60 seconds"
          kill $SERVER_PID 2>/dev/null || true
          exit 1
        }
        echo "Server started successfully"

    - name: Run unit tests (no server required)
      run: |
        pytest test_main.py -v --tb=short -x -m "not integration"
        
    - name: Run integration tests (server required)
      run: |
        pytest test_main.py -v --tb=short -x -m "integration"
        
    - name: Stop test server
      if: always()
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          kill $SERVER_PID 2>/dev/null || true
          sleep 2
          # Force kill if still running
          kill -9 $SERVER_PID 2>/dev/null || true
        fi
        
    - name: Generate test coverage
      run: |
        pip install pytest-cov
        pytest test_main.py --cov=main --cov-report=xml --cov-report=html -m "not integration"
        
    # - name: Upload coverage to artifacts
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: coverage-report
    #     path: htmlcov/

  cleanup:
    name: Cleanup
    runs-on: [self-hosted, gpu, cuda]
    if: always()
    needs: [gpu-integration-test, build-and-deploy]
    
    steps:
        
    - name: Clean up Python environments
      run: |
        rm -rf venv/
        pip cache purge || echo "Pip cache cleanup failed"
        
    - name: Clean up temporary files
      run: |
        rm -rf __pycache__/
        rm -rf .pytest_cache/
